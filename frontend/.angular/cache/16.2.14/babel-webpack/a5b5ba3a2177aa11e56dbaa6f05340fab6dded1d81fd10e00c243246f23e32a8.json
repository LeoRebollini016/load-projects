{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Global } from './global';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProjectService {\n  constructor(_http, __http) {\n    this._http = _http;\n    this.__http = __http;\n    this.url = Global.url;\n  }\n  testService() {\n    return 'Probando el servicio de Angular';\n  }\n  saveProject(project) {\n    let params = JSON.stringify(project);\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'save-project', params, {\n      headers: headers\n    });\n  }\n  getProjects() {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + 'projects', {\n      headers: headers\n    });\n  }\n  getProject(id) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + 'project/' + id, {\n      headers: headers\n    });\n  }\n  deleteProject(id) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.delete(this.url + 'project/' + id, {\n      headers: headers\n    });\n  }\n  updateProject(project) {\n    let params = JSON.stringify(project);\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.put(this.url + 'update-project/' + project._id, params, {\n      headers: headers\n    });\n  }\n  static #_ = this.ɵfac = function ProjectService_Factory(t) {\n    return new (t || ProjectService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectService,\n    factory: ProjectService.ɵfac\n  });\n}","map":{"version":3,"names":["HttpHeaders","Global","ProjectService","constructor","_http","__http","url","testService","saveProject","project","params","JSON","stringify","headers","set","post","getProjects","get","getProject","id","deleteProject","delete","updateProject","put","_id","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["F:\\Users\\Leo\\Desktop\\Universidad\\Cursos\\proyecto-angular\\src\\app\\services\\project.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Project } from '../models/project';\r\nimport { Global } from './global';\r\n\r\n@Injectable()\r\nexport class ProjectService{\r\n\tpublic url: string;\r\n\tconstructor(\r\n\t\tprivate _http: HttpClient,\r\n\t\tprivate __http: HttpClient\r\n\t){\r\n\t\tthis.url = Global.url;\r\n\t}\r\n\ttestService(){\r\n\t\treturn 'Probando el servicio de Angular';\r\n\t}\r\n\tsaveProject(project: Project): Observable<any>{\r\n\t\tlet params = JSON.stringify(project);\r\n\t\tlet headers = new HttpHeaders().set('Content-Type','application/json');\r\n\t\treturn this._http.post(this.url+'save-project', params, {headers: headers});\r\n\t}\r\n\tgetProjects(): Observable<any>{\r\n\t\tlet headers = new HttpHeaders().set('Content-Type','application/json');\r\n\t\treturn this._http.get(this.url+'projects', {headers: headers});\r\n\t}\r\n\tgetProject(id: any): Observable<any>{\r\n\t\tlet headers = new HttpHeaders().set('Content-Type','application/json');\r\n\t\treturn this._http.get(this.url+'project/'+id, {headers: headers});\r\n\t}\r\n\tdeleteProject(id: any): Observable<any>{\r\n\t\tlet headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n\t\treturn this._http.delete(this.url+'project/'+id, {headers: headers});\r\n\t}\r\n\tupdateProject(project: Project): Observable<any>{\r\n\t\tlet params = JSON.stringify(project);\r\n\t\tlet headers = new HttpHeaders().set('Content-Type','application/json');\r\n\t\treturn this._http.put(this.url+'update-project/'+project._id, params,{headers: headers});\r\n\t}\r\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,MAAM,QAAQ,UAAU;;;AAGjC,OAAM,MAAOC,cAAc;EAE1BC,YACSC,KAAiB,EACjBC,MAAkB;IADlB,KAAAD,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IAEd,IAAI,CAACC,GAAG,GAAGL,MAAM,CAACK,GAAG;EACtB;EACAC,WAAWA,CAAA;IACV,OAAO,iCAAiC;EACzC;EACAC,WAAWA,CAACC,OAAgB;IAC3B,IAAIC,MAAM,GAAGC,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC;IACpC,IAAII,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAC,kBAAkB,CAAC;IACtE,OAAO,IAAI,CAACV,KAAK,CAACW,IAAI,CAAC,IAAI,CAACT,GAAG,GAAC,cAAc,EAAEI,MAAM,EAAE;MAACG,OAAO,EAAEA;IAAO,CAAC,CAAC;EAC5E;EACAG,WAAWA,CAAA;IACV,IAAIH,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAC,kBAAkB,CAAC;IACtE,OAAO,IAAI,CAACV,KAAK,CAACa,GAAG,CAAC,IAAI,CAACX,GAAG,GAAC,UAAU,EAAE;MAACO,OAAO,EAAEA;IAAO,CAAC,CAAC;EAC/D;EACAK,UAAUA,CAACC,EAAO;IACjB,IAAIN,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAC,kBAAkB,CAAC;IACtE,OAAO,IAAI,CAACV,KAAK,CAACa,GAAG,CAAC,IAAI,CAACX,GAAG,GAAC,UAAU,GAACa,EAAE,EAAE;MAACN,OAAO,EAAEA;IAAO,CAAC,CAAC;EAClE;EACAO,aAAaA,CAACD,EAAO;IACpB,IAAIN,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACvE,OAAO,IAAI,CAACV,KAAK,CAACiB,MAAM,CAAC,IAAI,CAACf,GAAG,GAAC,UAAU,GAACa,EAAE,EAAE;MAACN,OAAO,EAAEA;IAAO,CAAC,CAAC;EACrE;EACAS,aAAaA,CAACb,OAAgB;IAC7B,IAAIC,MAAM,GAAGC,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC;IACpC,IAAII,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAC,kBAAkB,CAAC;IACtE,OAAO,IAAI,CAACV,KAAK,CAACmB,GAAG,CAAC,IAAI,CAACjB,GAAG,GAAC,iBAAiB,GAACG,OAAO,CAACe,GAAG,EAAEd,MAAM,EAAC;MAACG,OAAO,EAAEA;IAAO,CAAC,CAAC;EACzF;EAAC,QAAAY,CAAA,G;qBAhCWvB,cAAc,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd5B,cAAc;IAAA6B,OAAA,EAAd7B,cAAc,CAAA8B;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}